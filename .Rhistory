beta_bernoulli_alpha = 1,
beta_bernoulli_beta = 1,
save = TRUE)$gamma)
###
s1 = tabulate(s + 1, nbins = k + 1)
d1 = tabulate(d + 1, nbins = k + 1)
u1 = tabulate(u + 1, nbins = k + 1)
bs1 = tabulate(bs + 1, nbins = k + 1)
bd1 = tabulate(bd + 1, nbins = k + 1)
which(s1 != 0 & d1 != 0)
which(s1 != 0 & u1 != 0)
which(u1 != 0 & d1 != 0)
###
ps = s1 / sum(s1)
pbs = bs1 / sum(bs1)
pd = d1 / sum(d1)
pbd = bd1 / sum(bd1)
pu = u1 / sum(u1)
### Prior
c = 0:k
lps = lchoose(k,c) -
lbeta(sparse_alpha, sparse_beta) +
lfactorial(sparse_alpha + c - 1) +
lfactorial(sparse_beta + k - c - 1) -
lfactorial(sparse_alpha + sparse_beta + k - 1)
lpbs = lchoose(k,c) -
lbeta(sparse_alpha, sparse_beta/2) +
lfactorial(sparse_alpha + c - 1) +
lfactorial(sparse_beta/2 + k - c - 1) -
lfactorial(sparse_alpha + sparse_beta/2 + k - 1)
lpd = lchoose(k,c) -
lbeta(dense_alpha, dense_beta) +
lfactorial(dense_alpha + c - 1) +
lfactorial(dense_beta + k - c - 1) -
lfactorial(dense_alpha + dense_beta + k - 1)
lpbd = lchoose(k,c) -
lbeta(dense_alpha/2, dense_beta) +
lfactorial(dense_alpha/2 + c - 1) +
lfactorial(dense_beta + k - c - 1) -
lfactorial(dense_alpha/2 + dense_beta + k - 1)
lpu = rep(-log(1 + k), k + 1)
prior.su = lpbs - lpu
prior.ud = lpu - lpbd
prior.Ss = lps - lpbs
prior.dD = lpbd - lpd
prior.su
#Posterior
ps = s1 / sum(s1)
pbs = bs1 / sum(bs1)
pd = d1 / sum(d1)
pbd = bd1 / sum(bd1)
pu = u1 / sum(u1)
posterior.Ss = log(ps) - log(pbs)
posterior.su = log(pbs) - log(pu)
posterior.ud = log(pu) - log(pbd)
posterior.dD = log(pbd) - log(pd)
posterior.dD
##BF
lbf.Ss = prior.Ss - posterior.Ss
lbf.su = prior.su - posterior.su
lbf.ud = prior.ud - posterior.ud
lbf.dD = prior.dD - posterior.dD
lbf.Ss
19*9/2
10*9/2
s1
u
k
lbf.Ss[is.infinite(lbf.Ss)] = NA
lbf.Ss[is.nan(lbf.Ss)] = NA
lbf.su[is.infinite(lbf.su)] = NA
lbf.su[is.nan(lbf.su)] = NA
lbf.ud[is.infinite(lbf.ud)] = NA
lbf.ud[is.nan(lbf.ud)] = NA
lbf.dD[is.infinite(lbf.dD)] = NA
lbf.dD[is.nan(lbf.dD)] = NA
cbind(lbf.Ss, lbf.su, lbf.ud, lbf.dD)
log.bf.Ss = mean(lbf.Ss, na.rm = TRUE)
log.bf.su = mean(lbf.su, na.rm = TRUE)
log.bf.ud = mean(lbf.ud, na.rm = TRUE)
log.bf.dD = mean(lbf.dD, na.rm = TRUE)
#Sparse versus dense (S -- D)
log.bf.Ss + log.bf.su + log.bf.ud + log.bf.dD
### Prior
c = 0:k
lps = lchoose(k,c) +
(lbeta(alpha + c, beta + k - c) -
lbeta(alpha, beta))
alpha <- beta <- 1
c = 0:k
lps = lchoose(k,c) +
(lbeta(alpha + c, beta + k - c) -
lbeta(alpha, beta))
lps
lpbs
c
lps
c
lbeta(alpha + c, beta + k - c)
c
k
lbeta(1,1)
lbeta(1,1-c(3,4,5))
?dpois
setwd("C:/Users/nse1ulo/OneDrive - UvA/simBgms")
# =============================================================================
# Generate the ordinal data and then dichotomize it according to different criteria
# =============================================================================
# general settings
setwd("C:/Users/nse1ulo/OneDrive - UvA/simBgms")
library(easybgm)
?plot_edgeevidence()
# Set seed for reproducibility
set.seed(123)
# Define group means
mean_gr1 <- 10
mean_gr2 <- 7
mean_gr3 <- 5
# Define standard deviation (assuming equal variance for simplicity)
sd <- 2
# Define number of observations per group
n <- 30
# Simulate data for each group
group1 <- rnorm(n, mean=mean_gr1, sd=sd)
group2 <- rnorm(n, mean=mean_gr2, sd=sd)
group3 <- rnorm(n, mean=mean_gr3, sd=sd)
# Combine data into a single data frame
data <- data.frame(
value = c(group1, group2, group3),
group = factor(rep(c("Group1", "Group2", "Group3"), each=n))
)
# Show the first few rows of the data frame
head(data)
# Perform one-way ANOVA
anova_result <- aov(value ~ group, data = data)
summary(anova_result)
anov <- lm(value ~ group-1, data = data)
coef(anov)
anov <- list()
bf_01 <- list()
# Set seed for reproducibility
library(bain)
set.seed(123)
# Define group means
mean_gr1 <- 10
mean_gr2 <- 7
mean_gr3 <- 5
# Define standard deviation (assuming equal variance for simplicity)
sd <- 2
# Define number of observations per group
n <- 30
# Define number of simulations
nsim <- 10000
# Initialize a list to store the simulated data sets
simulated_data_list <- vector("list", nsim)
# Loop to generate nsim data sets
for (i in 1:nsim) {
# Simulate data for each group
group1 <- rnorm(n, mean=mean_gr1, sd=sd)
group2 <- rnorm(n, mean=mean_gr2, sd=sd)
group3 <- rnorm(n, mean=mean_gr3, sd=sd)
# Combine data into a single data frame
data <- data.frame(
value = c(group1, group2, group3),
group = factor(rep(c("Group1", "Group2", "Group3"), each=n))
)
# Store the data frame in the list
simulated_data_list[[i]] <- data
}
anov <- list()
for (i in 1:nsim) {
anov[[i]] <- aov(value ~ group, data = simulated_data_list[[i]])
}
bf_01 <- list()
for (i in 1:nsim) {
bf_01[[i]] <- bain(anov[[i]], "Group1 > Group2 >Group3; Group1 = Group2 = Group3")
}
View(anov)
anov[[1]][["coefficients"]]
anov <- list()
for (i in 1:nsim) {
anov[[i]] <- aov(value ~ group - 1, data = simulated_data_list[[i]])
}
# calculate BFs for eahc of the models
bf_01 <- list()
for (i in 1:nsim) {
bf_01[[i]] <- bain(anov[[i]], "Group1 > Group2 >Group3; Group1 = Group2 = Group3")
}
View(anov)
View(data)
View(anov)
bf_01 <- list()
for (i in 1:nsim) {
bf_01[[i]] <- bain(anov[[i]],
"groupGroup1 > groupGroup2 > groupGroup3; groupGroup1 = groupGroup2 = groupGroup3")
}
View(bf_01)
bf_01[[1]][["BFmatrix"]]
bf_01[[1]][["prior"]]
summary(bf_01[[1]])
print(bf_01[[1]])
print(bf_01[[2]])
print(bf_01[[3]])
print(bf_01[[444]])
bf_01[[1]][["fit"]]$BF[1]
print(bf_01[[1]])
bf_01[[1]][["fit"]]$BF[2]
bf_01[[1]][["fit"]]$BF[3]
bf_01[[1]][["fit"]]$BF[4]
bf_01[[1]][["fit"]]$BF[2]
bf_01[[1]][["fit"]]$BF[1] / bf_01[[1]][["fit"]]$BF[2]
bf_01[[1]][["fit"]]$BF[2] / bf_01[[1]][["fit"]]$BF[1]
BF_01 <- lapply(bf_01, function(x) x[["fit"]]$BF[1] / x[["fit"]]$BF[2])
View(BF_01)
View(BF_01)
BF_01 <- unlist(lapply(bf_01, function(x) x[["fit"]]$BF[1] / x[["fit"]]$BF[2]))
BF_01 <- unlist(lapply(bf_01, function(x) x[["fit"]]$BF[2] / x[["fit"]]$BF[1]))
cum_mean_BF_01 <- cumsum(BF_01) / seq_along(BF_01)
cum_mean_BF_01
mean(BF_01)
# Define group means
mean_gr1 <- 0
mean_gr2 <- 0
mean_gr3 <- 0
# Define standard deviation (assuming equal variance for simplicity)
sd <- 2
# Define number of observations per group
n <- 30
# Define number of simulations
nsim <- 10000
# Initialize a list to store the simulated data sets
simulated_data_list <- vector("list", nsim)
# Loop to generate nsim data sets
for (i in 1:nsim) {
# Simulate data for each group
group1 <- rnorm(n, mean=mean_gr1, sd=sd)
group2 <- rnorm(n, mean=mean_gr2, sd=sd)
group3 <- rnorm(n, mean=mean_gr3, sd=sd)
# Combine data into a single data frame
data <- data.frame(
value = c(group1, group2, group3),
group = factor(rep(c("Group1", "Group2", "Group3"), each=n))
)
# Store the data frame in the list
simulated_data_list[[i]] <- data
}
# estimate models for each ds
anov <- list()
for (i in 1:nsim) {
anov[[i]] <- aov(value ~ group - 1, data = simulated_data_list[[i]])
}
# calculate BFs for eahc of the models
bain_obj_2 <- list()
for (i in 1:nsim) {
bain_obj_2[[i]] <- bain(anov[[i]],
"groupGroup1 > groupGroup2 > groupGroup3; groupGroup1 = groupGroup2 = groupGroup3")
}
# Extract the BF_01 from the output
BF_01 <- unlist(lapply(bain_obj_1, function(x) x[["fit"]]$BF[1] / x[["fit"]]$BF[2]))
# Extract the BF_01 from the output
BF_01 <- unlist(lapply(bain_obj_2, function(x) x[["fit"]]$BF[1] / x[["fit"]]$BF[2]))
BF_10 <- unlist(lapply(bain_obj_2, function(x) x[["fit"]]$BF[1] / x[["fit"]]$BF[2]))
mean(BF_10)
# Define number of simulations
nsim <- 1e5
mean_gr1 <- 0
mean_gr2 <- 0
mean_gr3 <- 0
# Define standard deviation (assuming equal variance for simplicity)
sd <- 2
# Define number of observations per group
n <- 30
# Define number of simulations
nsim <- 10000
# Initialize a list to store the simulated data sets
simulated_data_list <- vector("list", nsim)
# Loop to generate nsim data sets
for (i in 1:nsim) {
# Simulate data for each group
group1 <- rnorm(n, mean=mean_gr1, sd=sd)
group2 <- rnorm(n, mean=mean_gr2, sd=sd)
group3 <- rnorm(n, mean=mean_gr3, sd=sd)
# Combine data into a single data frame
data <- data.frame(
value = c(group1, group2, group3),
group = factor(rep(c("Group1", "Group2", "Group3"), each=n))
)
# Store the data frame in the list
simulated_data_list[[i]] <- data
}
# estimate models for each ds
anov <- list()
for (i in 1:nsim) {
anov[[i]] <- aov(value ~ group - 1, data = simulated_data_list[[i]])
}
# calculate BFs for eahc of the models
bain_obj_2 <- list()
for (i in 1:nsim) {
bain_obj_2[[i]] <- bain(anov[[i]],
"groupGroup1 > groupGroup2 > groupGroup3; groupGroup1 = groupGroup2 = groupGroup3")
}
set.seed(123)
# Define standard deviation (assuming equal variance for simplicity)
sd <- 2
# Define number of observations per group
n <- 50
# Define number of simulations
nsim <- 1e5
# ================
mean_gr1 <- 0
mean_gr2 <- 0
mean_gr3 <- 0
# Initialize a list to store the simulated data sets
simulated_data_list <- vector("list", nsim)
# Loop to generate nsim data sets
for (i in 1:nsim) {
# Simulate data for each group
group1 <- rnorm(n, mean=mean_gr1, sd=sd)
group2 <- rnorm(n, mean=mean_gr2, sd=sd)
group3 <- rnorm(n, mean=mean_gr3, sd=sd)
# Combine data into a single data frame
data <- data.frame(
value = c(group1, group2, group3),
group = factor(rep(c("Group1", "Group2", "Group3"), each=n))
)
# Store the data frame in the list
simulated_data_list[[i]] <- data
}
# estimate models for each ds
anov <- list()
for (i in 1:nsim) {
anov[[i]] <- aov(value ~ group - 1, data = simulated_data_list[[i]])
}
# calculate BFs for eahc of the models
bain_obj_2 <- list()
for (i in 1:nsim) {
bain_obj_2[[i]] <- bain(anov[[i]],
"groupGroup1 > groupGroup2 > groupGroup3; groupGroup1 = groupGroup2 = groupGroup3")
}
# Extract the BF_01 from the output
BF_10 <- unlist(lapply(bain_obj_2, function(x) x[["fit"]]$BF[1] / x[["fit"]]$BF[2]))
# take the cumulative mean of the BF_01
cum_mean_BF_01 <- cumsum(BF_10) / seq_along(BF_10)
mean(BF_10)
set.seed(123)
# Define standard deviation (assuming equal variance for simplicity)
sd <- 2
# Define number of observations per group
n <- 50
# Define number of simulations
nsim <- 1e4
# ==============================================================================
# H1 is true
# ==============================================================================
# Define group means
mean_gr1 <- 10
mean_gr2 <- 7
mean_gr3 <- 5
# Initialize a list to store the simulated data sets
simulated_data_list <- vector("list", nsim)
# Loop to generate nsim data sets
for (i in 1:nsim) {
# Simulate data for each group
group1 <- rnorm(n, mean=mean_gr1, sd=sd)
group2 <- rnorm(n, mean=mean_gr2, sd=sd)
group3 <- rnorm(n, mean=mean_gr3, sd=sd)
# Combine data into a single data frame
data <- data.frame(
value = c(group1, group2, group3),
group = factor(rep(c("Group1", "Group2", "Group3"), each=n))
)
# Store the data frame in the list
simulated_data_list[[i]] <- data
}
# estimate models for each ds
anov <- list()
for (i in 1:nsim) {
anov[[i]] <- aov(value ~ group - 1, data = simulated_data_list[[i]])
}
# calculate BFs for each of the models
bain_obj_1 <- list()
for (i in 1:nsim) {
bain_obj_1[[i]] <- bain(anov[[i]],
"groupGroup1 > groupGroup2 > groupGroup3; groupGroup1 = groupGroup2 = groupGroup3")
}
# Extract the BF_01 from the output
bain_obj_1 <- unlist(lapply(bain_obj_1, function(x) x[["fit"]]$BF[2] / x[["fit"]]$BF[1]))
# take the cumulative mean of the BF_01
cum_mean_BF_01 <- cumsum(BF_01) / seq_along(BF_01)
mean(BF_01)
mean(bain_obj_1)
plot(cum_mean_BF_01)
plot(cum_mean_BF_01)
plot(cum_mean_BF_01, type = "l")
set.seed(1234)
# Define standard deviation (assuming equal variance for simplicity)
sd <- 2
# Define standard deviation (assuming equal variance for simplicity)
sd <- 2
# Define number of observations per group
n <- 10
# Define number of simulations
nsim <- 1e4
# ==============================================================================
# H1 is true
# ==============================================================================
# Define group means
mean_gr1 <- 10
mean_gr2 <- 7
mean_gr3 <- 5
# Define number of simulations
nsim <- 1e4
# ==============================================================================
# H1 is true
# ==============================================================================
# Define group means
mean_gr1 <- 10
mean_gr2 <- 9
mean_gr3 <- 8
# Initialize a list to store the simulated data sets
simulated_data_list <- vector("list", nsim)
# Loop to generate nsim data sets
for (i in 1:nsim) {
# Simulate data for each group
group1 <- rnorm(n, mean=mean_gr1, sd=sd)
group2 <- rnorm(n, mean=mean_gr2, sd=sd)
group3 <- rnorm(n, mean=mean_gr3, sd=sd)
# Combine data into a single data frame
data <- data.frame(
value = c(group1, group2, group3),
group = factor(rep(c("Group1", "Group2", "Group3"), each=n))
)
# Store the data frame in the list
simulated_data_list[[i]] <- data
}
anov <- list()
for (i in 1:nsim) {
anov[[i]] <- aov(value ~ group - 1, data = simulated_data_list[[i]])
}
bain_obj_1 <- list()
for (i in 1:nsim) {
bain_obj_1[[i]] <- bain(anov[[i]],
"groupGroup1 > groupGroup2 > groupGroup3; groupGroup1 = groupGroup2 = groupGroup3")
}
BF_01 <- unlist(lapply(bain_obj_1, function(x) x[["fit"]]$BF[2] / x[["fit"]]$BF[1]))
mean(bain_obj_1)
BF_01
cum_mean_BF_01 <- cumsum(BF_01) / seq_along(BF_01)
cum_mean_BF_01
plot(cum_mean_BF_01, type = "l")
plot(cum_mean_BF_01, type = "l", ylim = c(0,2))
mean_gr1 <- 0
mean_gr2 <- 0
mean_gr3 <- 0
# Initialize a list to store the simulated data sets
dataH0 <- vector("list", nsim)
# Loop to generate nsim data sets
for (i in 1:nsim) {
# Simulate data for each group
group1 <- rnorm(n, mean=mean_gr1, sd=sd)
group2 <- rnorm(n, mean=mean_gr2, sd=sd)
group3 <- rnorm(n, mean=mean_gr3, sd=sd)
# Combine data into a single data frame
data <- data.frame(
value = c(group1, group2, group3),
group = factor(rep(c("Group1", "Group2", "Group3"), each=n))
)
# Store the data frame in the list
dataH0[[i]] <- data
}
# estimate models for each ds
anovH0 <- list()
for (i in 1:nsim) {
anovH0[[i]] <- aov(value ~ group - 1, data = dataH0[[i]])
}
# calculate BFs for eahc of the models
bain_obj_H0 <- list()
for (i in 1:nsim) {
bain_obj_H0[[i]] <- bain(anov[[i]],
"groupGroup1 > groupGroup2 > groupGroup3; groupGroup1 = groupGroup2 = groupGroup3")
}
# Extract the BF_01 from the output
BF_10 <- unlist(lapply(bain_obj_H0, function(x) x[["fit"]]$BF[1] / x[["fit"]]$BF[2]))
# take the cumulative mean of the BF_01
cum_mean_BF_10 <- cumsum(BF_10) / seq_along(BF_10)
mean(BF_10)
plot(cum_mean_BF_01, type = "l")
mean(BF_10)
plot(cum_mean_BF_10, type = "l", ylim = c(0,2))
BF_10
plot(cum_mean_BF_10, type = "l")
source("C:/Users/nsekulo/OneDrive - UvA/THESIS-PROJECT-3_Good-check-BF/R/Final/Binomial/inf_hyp.R")
library(easybgm)
library(BGGM)
data <- get(data("depression_anxiety_t1"))
data <- data[, 1:10]
res <- easybgm(data, type = "ordinal"\)
res <- easybgm(data, type = "ordinal")
res
?easybgm
?bgms:bgm
library(bgms)
?bgm
nsim <- 5e8
nsim
2*((⅓)/(¼))*¼ + ((⅓)/(½))*½
2*((1/3)/(1/4))*1/4 + ((1/3)/(1/2))*1/2
shiny::runApp('C:/Users/nsekulo/OneDrive - UvA/THESIS-PROJECT-2_Sensitivity Analysis of Prior Distributions in Bayesian Graphical Modeling - repo/Code from submission - 2 - final/bgmapp')
runApp('C:/Users/nsekulo/OneDrive - UvA/THESIS-PROJECT-2_Sensitivity Analysis of Prior Distributions in Bayesian Graphical Modeling - repo/Code from submission - 2 - final/bgmapp')
setwd("C:/Users/nsekulo/OneDrive - UvA/PseudoMLE")
library(devtools)
create_package("C:/Users/nsekulo/OneDrive - UvA/PseudoMLE")
